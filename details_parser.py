import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from tqdm import tqdm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è Yandex Browser
options = webdriver.ChromeOptions()
options.binary_location = "C:/Users/–°–µ—Ä–≥–µ–π/AppData/Local/Yandex/YandexBrowser/Application/browser.exe"
# options.add_argument('--headless')  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –≤–∫–ª—é—á–∞–π headless
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/122.0.0.0 Safari/537.36")

driver = webdriver.Chrome(
    service=Service("C:/Users/–°–µ—Ä–≥–µ–π/Downloads/134.0.6998.35 chromedriver-win64/chromedriver-win64/chromedriver.exe"),
    options=options
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("cian_moscow_flats_with_coords.csv")

# –ù–æ–≤—ã–µ –ø–æ–ª—è
df["–ö–æ–º–Ω–∞—Ç—ã"] = None
df["–ü–ª–æ—â–∞–¥—å"] = None
df["–≠—Ç–∞–∂"] = None
df["–¢–∏–ø –¥–æ–º–∞"] = None
df["–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏"] = None
df["–ü–æ—Ç–æ–ª–∫–∏"] = None

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–æ–º
for i, row in tqdm(df.iterrows(), total=len(df)):
    url = row["–°—Å—ã–ª–∫–∞"]
    print(f"\n[{i+1}/{len(df)}] {url}")

    try:
        driver.get(url)
        WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.XPATH, '//div[contains(@class, "a10a3f92e9--item--")]'))
        )

        params = driver.find_elements(By.XPATH, '//div[contains(@class, "a10a3f92e9--item--")]')
        print(f"  ‚ñ∂ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(params)}")

        for p in params:
            try:
                lines = p.text.strip().split("\n")
                if len(lines) < 2:
                    continue

                label = lines[0].strip()
                value = lines[1].strip()
                print(f"    {label} ‚Üí {value}")

                if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in label:
                    df.at[i, "–ü–ª–æ—â–∞–¥—å"] = value.replace(" –º¬≤", "").replace(",", ".")
                elif "–≠—Ç–∞–∂" in label:
                    df.at[i, "–≠—Ç–∞–∂"] = value
                elif "–¢–∏–ø –¥–æ–º–∞" in label:
                    df.at[i, "–¢–∏–ø –¥–æ–º–∞"] = value
                elif "–ì–æ–¥ —Å–¥–∞—á–∏" in label or "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏" in label:
                    df.at[i, "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏"] = value
                elif "–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤" in label:
                    df.at[i, "–ü–æ—Ç–æ–ª–∫–∏"] = value.replace(" –º", "").replace(",", ".")
                elif "–∫–æ–º–Ω–∞—Ç" in label.lower() or "–∫–æ–º–Ω" in value.lower():
                    df.at[i, "–ö–æ–º–Ω–∞—Ç—ã"] = value

            except Exception as e:
                print(f"    ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç: {e}")

    except Exception as e:
        print(f"  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        time.sleep(5)

    # üíæ –ê–≤—Ç–æ—Å–µ–π–≤ –∫–∞–∂–¥—ã–µ 50 –∫–≤–∞—Ä—Ç–∏—Ä
    if i % 50 == 0 and i > 0:
        df.iloc[:i].to_csv("tmp_details_progress.csv", index=False, encoding="utf-8-sig")
        print(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ {i} –æ–±—ä–µ–∫—Ç–∞—Ö")

driver.quit()
df.to_csv("cian_moscow_detailed.csv", index=False, encoding="utf-8-sig")
print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ 'cian_moscow_detailed.csv'")
