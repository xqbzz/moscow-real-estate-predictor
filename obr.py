import pandas as pd
import numpy as np
import folium
from folium.plugins import MarkerCluster
import joblib

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
model = joblib.load("model_main.joblib")
from predict import preprocess

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("cian_moscow_detailed.csv")
df = df[df["lat"].notna() & df["lon"].notna()]

# üß± –†–∞–∑–±–æ—Ä —ç—Ç–∞–∂–µ–π (–Ω—É–∂–Ω–æ –¥–ª—è preprocess)
import re
def parse_floor(raw):
    match = re.search(r"(\d+)\s*–∏–∑\s*(\d+)", str(raw))
    return (int(match.group(1)), int(match.group(2))) if match else (None, None)

df[["–≠—Ç–∞–∂_—Ç–µ–∫—É—â–∏–π", "–≠—Ç–∞–∂_–≤—Å–µ–≥–æ"]] = df["–≠—Ç–∞–∂"].apply(lambda x: pd.Series(parse_floor(x)))

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
df["–¶–µ–Ω–∞"] = df["–¶–µ–Ω–∞"].astype(str).str.replace(r"[^\d]", "", regex=True)
df = df[df["–¶–µ–Ω–∞"] != ""]
df["–¶–µ–Ω–∞"] = df["–¶–µ–Ω–∞"].astype(float)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
X, _ = preprocess(df)
df["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"] = np.expm1(model.predict(X))

# –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ
price_min = df["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"].min()
price_max = df["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"].max()

def price_to_color(price):
    norm = (price - price_min) / (price_max - price_min)
    r = int(255 * norm)
    g = int(255 * (1 - norm))
    return f'#{r:02x}{g:02x}00'

# –ö–∞—Ä—Ç–∞
m = folium.Map(location=[55.75, 37.62], zoom_start=11)
cluster = MarkerCluster().add_to(m)

for _, row in df.iterrows():
    color = price_to_color(row["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"])
    popup = folium.Popup(
        f"<b>{row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–≤–∞—Ä—Ç–∏—Ä–∞')}</b><br>"
        f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {row['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞']:,.0f} ‚ÇΩ<br>"
        f"–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {row['–¶–µ–Ω–∞']:,.0f} ‚ÇΩ",
        max_width=300
    )
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=6,
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=0.8,
        popup=popup
    ).add_to(cluster)

m.save("map_predictions.html")
